<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
   <title>A blog by Jason Mobarak</title>
   <link href="https://silverjam.github.io/"/>
   <link rel="self" href="https://silverjam.github.io/atom.xml"/>
   <id>https://silverjam.github.io/</id>
   <updated>2025-09-20T20:53:39Z</updated>
   <subtitle>Personal blog featuring software development, technology, and various projects</subtitle>
   <generator uri="https://github.com/silverjam/blog" version="1.0">XSLT Static Site Generator</generator>
   <author>
      <name>Jason Mobarak</name>
      <uri>https://silverjam.github.io/</uri>
   </author>
   <entry>
      <title>Building mosh from source on Ubuntu 24.04</title>
      <link href="https://silverjam.github.io/posts/2025-09-17-building-mosh-from-source.html"/>
      <id>https://silverjam.github.io/posts/2025-09-17-building-mosh-from-source.html</id>
      <updated>2025-09-17T12:00:00Z</updated>
      <published>2025-09-17T12:00:00Z</published>
      <author>
         <name>Jason Mobarak</name>
         <uri>https://silverjam.github.io/</uri>
      </author>
      <category term="mosh"/>
      <category term="ssh"/>
      <category term="terminal"/>
      <category term="linux"/>
      <category term="ubuntu"/>
      <summary type="text"> How to build Mosh from source on Ubuntu 22.04 or 24.04. </summary>
      <content type="html">&lt;![CDATA[ How to build Mosh from source on Ubuntu 22.04 or 24.04. 

&lt;p&gt;&lt;em&gt;SUMMARY: How to build Mosh from source on Ubuntu 22.04 or 24.04.&lt;/em&gt;&lt;/p&gt;&lt;h2&gt;Why build Mosh from source&lt;/h2&gt;&lt;p&gt;&lt;a href="https://mosh.org"&gt;Mosh&lt;/a&gt; (or Mobile Shell) is an open source project for using terminal emulators on-the-go.  It's especially useful if you want to be mobile but also desire your terminal session to stay connected across network transitions and seamlessly reconnect when network conditions improve.&lt;/p&gt;&lt;p&gt;Unfortunately the project seems to have stalled out as of late, and many features and bug fixes seem to be stuck on an unreleased version of the code. Since the project hasn't seen movement for about 2 years, it's also got some bitrot, so it needs some finessing in order to build it on a modern platform like Ubuntu 24.04.&lt;/p&gt;&lt;h2&gt;Basics&lt;/h2&gt;&lt;p&gt;Basics needed for building should be something like this:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;sudo apt install \
  build-essential clang cmake git automake autoconf automake libssl-dev
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Build and install older protobuf release&lt;/h2&gt;&lt;p&gt;Mosh depends on an older release protobuf, modern versions on Ubuntu will not work. First, fetch the source:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;git clone https://github.com/protocolbuffers/protobuf \
  --single-branch --branch 25.x --depth 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Configure it:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;cd protobuf
git submodule update --init --recursive
mkdir build
cd build
cmake .. -DCMAKE_INSTALL_PREFIX=/opt/protobuf25 \
  -DCMAKE_BUILD_TYPE=Release -Dprotobuf_BUILD_TESTS=OFF
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Finally, build and install:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;cmake --build .. --parallel
sudo cmake --install ..
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Build and install Mosh&lt;/h2&gt;&lt;p&gt;Fetch Mosh source:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;git clone https://github.com/mobile-shell/mosh --single-branch --depth 1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Configure the build:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;cd mosh
./autogen.sh
PKG_CONFIG_PATH=/opt/protobuf25/lib/pkgconfig \
  PATH=/opt/protobuf25/bin:$PATH \
  ./configure --prefix /opt/mosh \
    CFLAGS="-I/opt/protobuf25/include -L/opt/protobuf25/lib" \
    CXXFLAGS="-I/opt/protobuf25/include -L/opt/protobuf25/lib" \
    LDFLAGS="-L/opt/protobuf25/lib"
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Run the build and install:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;make -j `nproc`
sudo make install
&lt;/code&gt;&lt;/pre&gt;&lt;h2&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Luckily mosh does not seem to dynamically link to anything except system libraries (so we don't need to tweak things like the dynamic lib search path):&lt;/p&gt;&lt;pre&gt;&lt;code&gt;❯ ldd /opt/mosh/bin/mosh*

/opt/mosh/bin/mosh:
 not a dynamic executable

/opt/mosh/bin/mosh-client:
 linux-vdso.so.1 (0x00007b9763220000)
 libtinfo.so.6 =&gt; /lib/x86_64-linux-gnu/libtinfo.so.6 (0x00007b97631d2000)
 libcrypto.so.3 =&gt; /lib/x86_64-linux-gnu/libcrypto.so.3 (0x00007b9762600000)
 libz.so.1 =&gt; /lib/x86_64-linux-gnu/libz.so.1 (0x00007b9762be4000)
 libstdc++.so.6 =&gt; /lib/x86_64-linux-gnu/libstdc++.so.6 (0x00007b9762200000)
 libm.so.6 =&gt; /lib/x86_64-linux-gnu/libm.so.6 (0x00007b9762517000)
 libgcc_s.so.1 =&gt; /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007b9762bb6000)
 libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007b9761e00000)
 /lib64/ld-linux-x86-64.so.2 (0x00007b9763222000)

/opt/mosh/bin/mosh-server:
 linux-vdso.so.1 (0x00007aa77a36e000)
 libtinfo.so.6 =&gt; /lib/x86_64-linux-gnu/libtinfo.so.6 (0x00007aa77a320000)
 libcrypto.so.3 =&gt; /lib/x86_64-linux-gnu/libcrypto.so.3 (0x00007aa779600000)
 libz.so.1 =&gt; /lib/x86_64-linux-gnu/libz.so.1 (0x00007aa77a304000)
 libstdc++.so.6 =&gt; /lib/x86_64-linux-gnu/libstdc++.so.6 (0x00007aa779200000)
 libm.so.6 =&gt; /lib/x86_64-linux-gnu/libm.so.6 (0x00007aa77a21b000)
 libgcc_s.so.1 =&gt; /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007aa77a1eb000)
 libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007aa778e00000)
 /lib64/ld-linux-x86-64.so.2 (0x00007aa77a370000)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;After this you should have a functioning &lt;code&gt;mosh-server&lt;/code&gt; binary that you can use with whatever client you desire:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;❯ /opt/mosh/bin/mosh-server --version

mosh-server (mosh 1.4.0) [build 1105d48]
Copyright 2012 Keith Winstein &lt;mosh-devel@mit.edu&gt;
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
&lt;/code&gt;&lt;/pre&gt;]]&gt;</content>
   </entry>
   <entry>
      <title>Static site generator (blog) using XSLT and Markdown</title>
      <link href="https://silverjam.github.io/posts/2023-07-24.html"/>
      <id>https://silverjam.github.io/posts/2023-07-24.html</id>
      <updated>2023-07-25T12:00:00Z</updated>
      <published>2023-07-25T12:00:00Z</published>
      <author>
         <name>Jason Mobarak</name>
         <uri>https://silverjam.github.io/</uri>
      </author>
      <category term="blog"/>
      <category term="ssg"/>
      <category term="markdown"/>
      <category term="xslt"/>
      <category term="xml"/>
      <summary type="text"> Building a static site generator (blog) with XSLT and Markdown.  The goal: build something relatively simple and with tools that will work "FOREVER". </summary>
      <content type="html">&lt;![CDATA[ Building a static site generator (blog) with XSLT and Markdown.  The goal: build something relatively simple and with tools that will work "FOREVER". 

&lt;p&gt;&lt;em&gt;SUMMARY: Building a static site generator (blog) with XSLT and Markdown.  The goal: build something relatively simple and with tools that will work "FOREVER".&lt;/em&gt;&lt;/p&gt;&lt;h2&gt;What's the point of this?&lt;/h2&gt;&lt;p&gt;The main purpose of this project is to create a static site generator using Markdown (e.g. plain text files with some light formatting) and a selection of both old and new technologies to make a somewhat modern blog that will be easy to maintain for over a long period of time (many, many years).  The secondary goal is to be able to use somewhat modern web technologies in the generated output.&lt;/p&gt;&lt;h3&gt;Motivations&lt;/h3&gt;&lt;p&gt;In the past I've enjoyed the simplicity of blogs built on static site generators like Jekyll, Hugo and Sphinx.  Like most things in tech though, these things evolve and age.  Because of this I've often found myself in a place where I needed ressurect a very old technology (Jekyll in my case) or modernize it.&lt;/p&gt;&lt;h3&gt;Rational&lt;/h3&gt;&lt;p&gt;Again, this project is designed to use a bit of old and new tech.  For the generation portion of the project, older technologies will be used. The hope or intent is that due to their age and muturity they aren't going to change much, and due to their ubiqity (for better or worse) aren't going to go anywhere either.&lt;/p&gt;&lt;p&gt;These properties should make the generation part of the project work for many years to come, with little or no changes necessary to the underlying machinery. In the generated output I'm leaving freedom to use whatever flavor of web technology is currently relevant and somewhat modern.&lt;/p&gt;&lt;p&gt;More succinctly, I'm driving for the following properties:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Static site generator: long term, well established tech, minimal maintenance&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Generated output: whatever the flavor of the month is for web tech&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h2&gt;What are the things this will support?&lt;/h2&gt;&lt;p&gt;Below are a selection of elements that the SSG should support:&lt;/p&gt;&lt;p&gt;⬇️  Thematic breaks ⬇️  (And emoji)&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;&lt;em&gt;Emphasized text&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Bold text&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Strikethrough&lt;/p&gt;&lt;p&gt;Unorderded lists:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;Bananas&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Fruit&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Apples&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;Ordered lists:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;First&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Second&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;Third&lt;/p&gt;&lt;/li&gt;&lt;/ol&gt;&lt;h2&gt;Subheadings&lt;/h2&gt;&lt;p&gt;This is a text only block:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;A plaintext block
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is some Python code:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;print("Hello world?")
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is some Rust code:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;fn main() {
    println!("Hello world?");
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This is some &lt;code&gt;inline code&lt;/code&gt; (which doesn't look very good yet)?&lt;/p&gt;&lt;hr/&gt;&lt;p&gt;This is a link &lt;a href="https://google.com"&gt;Google&lt;/a&gt;.&lt;/p&gt;]]&gt;</content>
   </entry>
</feed>