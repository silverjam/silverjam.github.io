<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Brain dump in text format]]></title>
  <link href="http://silverjam.github.io/atom.xml" rel="self"/>
  <link href="http://silverjam.github.io/"/>
  <updated>2015-07-03T11:58:47-07:00</updated>
  <id>http://silverjam.github.io/</id>
  <author>
    <name><![CDATA[Jason Mobarak]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Prius Total Cost of Ownership]]></title>
    <link href="http://silverjam.github.io/blog/2015/05/22/prius-total-cost-of-ownership/"/>
    <updated>2015-05-22T12:44:00-07:00</updated>
    <id>http://silverjam.github.io/blog/2015/05/22/prius-total-cost-of-ownership</id>
    <content type="html"><![CDATA[<p>Disclaimer: I like our Prius Plug-in, but I really don&#8217;t like our Prius C.  The
plug-in version came with a little green sticker that lets you whiz by other
people that didn&#8217;t think to plop down the extra dough for a &#8220;range extended&#8221;
electric (which the Prius Plug-in really is <strong>not</strong> that, but I digress).</p>

<p>First, a question for Prius owners: do you think the $2500-$4000 cost of a
replacement batter pack at 9 years would nullify your fuel saving over that
time period?</p>

<p>For us, the answer is mostly no, but it depends on what you drove before (or
what you would drive instead).  Versus the 2000 Passport (driving 350 miles a
week for commuting), which has a 21 gallon tank (that we usually filled at
about 16 gallons).  It would cost about $26k in fuel over 9 years (16g/w *
$3.50/g * 52w/y * 9y) versus the Prius&#8217; $14k (8.5g/w
* $3.50/g * 52w/y * 9y).</p>

<p>It does put a dent in the savings though, and when compared to other high mpg
cares the &#8220;win&#8221; isn&#8217;t as clear.  If you consider something like Ford&#8217;s EcoBoost
which get&#8217;s good milage and performance from tiny engines, it probably would
not win, this is assuming the total cost of ownership for a Ford is similar to
the Toyota, but maybe that&#8217;s a laughable thing to assume&#8230;</p>

<p>If you compare it to a Camry, the Prius doesn&#8217;t seem to win.  Camry is a
Toyota, so you&#8217;re safer in assuming the platform&#8217;s reliability and TCO are
similar.  For me the Camry would be about $35 a week in gas, or $16k over a 9
year period, which clearly does not win over the Prius plus replacing it&#8217;s
battery pack.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Least bits to transmit a permutation]]></title>
    <link href="http://silverjam.github.io/blog/2015/04/19/least-bits-required-to-transmit-a-permutation/"/>
    <updated>2015-04-19T23:53:00-07:00</updated>
    <id>http://silverjam.github.io/blog/2015/04/19/least-bits-required-to-transmit-a-permutation</id>
    <content type="html"><![CDATA[<blockquote><p>Consider the 52 cards of a deck. You generated a random sequence for these cards and want to send that sequence to a receiver. You want to minimize the communication between you and the receiver, i.e., minimize the number of bits required to send the sequence.</p></blockquote>


<p>What is the minimum number of bits required to send the sequence?</p>

<p>To arrive at the solution, I&#8217;m going to consider a smaller example: What are
all the permutations of <code>[0, 1, 2, 3]</code>?</p>

<pre><code>[0,1,2,3] =&gt; perm 00 =&gt; binary: 0 0 0 0 0   || [0,3,1,2] =&gt; perm 12 =&gt; binary: 0 1 1 0 0
[0,2,1,3] =&gt; perm 01 =&gt; binary: 0 0 0 0 1   || [0,3,2,1] =&gt; perm 13 =&gt; binary: 0 1 1 0 1
[1,0,2,3] =&gt; perm 02 =&gt; binary: 0 0 0 1 0   || [1,3,0,2] =&gt; perm 14 =&gt; binary: 0 1 1 1 0
[1,2,0,3] =&gt; perm 03 =&gt; binary: 0 0 0 1 1   || [1,3,2,0] =&gt; perm 15 =&gt; binary: 0 1 1 1 1
[2,0,1,3] =&gt; perm 04 =&gt; binary: 0 0 1 0 0   || [2,3,0,1] =&gt; perm 16 =&gt; binary: 1 0 0 0 0
[2,1,0,3] =&gt; perm 05 =&gt; binary: 0 0 1 0 1   || [2,3,1,0] =&gt; perm 17 =&gt; binary: 1 0 0 0 1
[0,1,3,2] =&gt; perm 06 =&gt; binary: 0 0 1 1 0   || [3,0,1,2] =&gt; perm 18 =&gt; binary: 1 0 0 1 0
[0,2,3,1] =&gt; perm 07 =&gt; binary: 0 0 1 1 1   || [3,0,2,1] =&gt; perm 19 =&gt; binary: 1 0 0 1 1
[1,0,3,2] =&gt; perm 08 =&gt; binary: 0 1 0 0 0   || [3,1,0,2] =&gt; perm 20 =&gt; binary: 1 0 1 0 0
[1,2,3,0] =&gt; perm 09 =&gt; binary: 0 1 0 0 1   || [3,1,2,0] =&gt; perm 21 =&gt; binary: 1 0 1 0 1
[2,0,3,1] =&gt; perm 10 =&gt; binary: 0 1 0 1 0   || [3,2,0,1] =&gt; perm 22 =&gt; binary: 1 0 1 1 0
[2,1,3,0] =&gt; perm 11 =&gt; binary: 0 1 0 1 1   || [3,2,1,0] =&gt; perm 23 =&gt; binary: 1 0 1 1 1
</code></pre>

<p>How many bits do you need to represent a number in general?  Another way of
phrasing: how many digits do I need to represent this number?  Take a base 10
number, say 123, written as a function combination of it&#8217;s bases: <code>(10^2 * 1) +
(10^1 * 2) + (10^0 * 3) = 100 + 20 + 3</code>.  So, the largest component is <code>100</code>, and
we need at least <code>3</code> digits (or 1 + the power of largest component).</p>

<p>So, 10<sup>N</sup> = X, we want to know what N is, thus, log_10(X) = N.  This holds for
base 2 numbers, thus:</p>

<pre><code>log_2(X) = N
</code></pre>

<p>So, if we have 24 permutations (4 factorial), we need this many bits:</p>

<pre><code>log_2(24) = 4.58; ceil(4.58) = 5
</code></pre>

<p>Since we can&#8217;t have partial bits we round up&#8230; and arrive at 5.</p>

<p>If we need only 5-bits to number each sequence, we could just store a lookup
table&#8230; but for larger inputs, you cannot just transmit a sequence number and
have the remote end look-up which permutation to use in a lookup table, this
would use too much memory&#8230;</p>

<p>However, what if we choose to map these as choices, noting that choices cannot
be repeated and the that pool of choices shrinks each time.  Since the pool is
<code>[0, 1, 2, 3]</code>, the choices would be for example:</p>

<pre><code>                       Sequence     Choices
                       --------     -------
Perm 1 -                            [0,1,2,3]
       - choose(00) =&gt; [0]          [1,2,3]
       - choose(00) =&gt; [0,1]        [2,3]
       - choose( 0) =&gt; [0,1,2]      [3]
       - choose( _) =&gt; [0,1,2,3]    []

    binary: 000 00 =&gt; decimal: 0

---------------------------------------------

                       Sequence     Choices
                       --------     -------
Perm 2 -                            [0,1,2,3]
       - choose(00) =&gt; [0]          [1,2,3]
       - choose(01) =&gt; [0,2]        [1,3]
       - choose( 0) =&gt; [0,2,1]      [3]
       - choose( _) =&gt; [0,1,2,3]    []

    binary: 00 01 0 =&gt; decimal: 2
</code></pre>

<p>Then, we can rewrite the list of permutation like this:</p>

<pre><code>Permutation   Choices    |  Permutation   Choices
-----------   ---------  |  -----------   ---------
[3,2,1,|]     [D,C,A,B]  |  [1,2,1,|]     [B,D,A,C]
[3,2,0,|]     [D,C,B,A]  |  [1,2,0,|]     [B,D,C,A]
[3,1,1,|]     [D,B,A,C]  |  [1,1,1,|]     [B,C,A,D]
[3,1,0,|]     [D,B,C,A]  |  [1,1,0,|]     [B,C,D,A]
[3,0,1,|]     [D,A,B,C]  |  [1,0,1,|]     [B,A,C,D]
[3,0,0,|]     [D,A,C,B]  |  [1,0,0,|]     [B,A,D,C]
[2,2,1,|]     [C,D,A,B]  |  [0,2,1,|]     [A,D,B,C]
[2,2,0,|]     [C,D,B,A]  |  [0,2,0,|]     [A,D,C,B]
[2,1,1,|]     [C,B,A,D]  |  [0,1,1,|]     [A,C,B,D]
[2,1,0,|]     [C,B,D,A]  |  [0,1,0,|]     [A,C,D,B]
[2,0,1,|]     [C,A,B,D]  |  [0,0,1,|]     [A,B,C,D]
[2,0,0,|]     [C,A,D,B]  |  [0,0,0,|]     [A,B,D,C]
</code></pre>

<p>Writing it this way, a pattern emerges&#8230; the first column is never greater
than <code>3</code>, the second is never great than <code>2</code>, the third is only every <code>1</code> or
<code>0</code>.</p>

<p>We can map these choices into a number that uses only 5-bits by noticing:</p>

<pre><code>Always 0-3 for most significant
  [00, 01, 10, 11] =&gt; [0, 1, 2, 3]

Then always 0-2 for next bits
  [00, 01, 10] =&gt; [0, 1, 2]

Then only 1 or 0 left:
  [0, 1] =&gt; [0, 1]

So, the bit pattern is roughly:
  ZZ YY X (Z = first choice, Y = second choice, X = final choice)
</code></pre>

<p>The &#8220;bit pattern&#8221; idea isn&#8217;t really a good model of the general idea, since
we&#8217;ll be spreading <code>ZZ</code> portion into the coded sequence number.  Let <code>max = 3</code>,
to prepare the first choice to be mapped we multiply the choice by max, then we
can use integer division to recover the number:</p>

<pre><code>b000 * 3 =&gt; b0000 (0)
b001 * 3 =&gt; b0011 (3)
b010 * 3 =&gt; b0110 (6)
b011 * 3 =&gt; b1001 (9)
</code></pre>

<p>Now, we can add the second choice to this number, if we mod by <code>3</code>, we&#8217;ll get
back the second choice, if we use integer division by <code>3</code>, we&#8217;ll get back the
first choice:</p>

<pre><code>(b0000 + b00) =&gt; b0000 ( 0) | mod 3 =&gt; 0 | div 3 =&gt; 0
(b0000 + b01) =&gt; b0001 ( 1) | mod 3 =&gt; 1 | div 3 =&gt; 0
(b0000 + b10) =&gt; b0010 ( 2) | mod 3 =&gt; 2 | div 3 =&gt; 0

(b0011 + b00) =&gt; b0011 ( 3) | mod 3 =&gt; 0 | div 3 =&gt; 1
(b0011 + b01) =&gt; b0100 ( 4) | mod 3 =&gt; 1 | div 3 =&gt; 1
(b0011 + b10) =&gt; b0101 ( 5) | mod 3 =&gt; 2 | div 3 =&gt; 1

(b0110 + b00) =&gt; b0110 ( 6) | mod 3 =&gt; 0 | div 3 =&gt; 2
(b0110 + b01) =&gt; b0111 ( 7) | mod 3 =&gt; 1 | div 3 =&gt; 2
(b0110 + b10) =&gt; b1000 ( 8) | mod 3 =&gt; 2 | div 3 =&gt; 2

(b1001 + b00) =&gt; b1001 ( 9) | mod 3 =&gt; 0 | div 3 =&gt; 3
(b1001 + b01) =&gt; b1010 (10) | mod 3 =&gt; 1 | div 3 =&gt; 3
(b1001 + b10) =&gt; b1011 (11) | mod 3 =&gt; 2 | div 3 =&gt; 3
</code></pre>

<p>To map the final choice into this number we multiply each of these numbers by
<code>max-1 = 2</code>, and add in the final choice:</p>

<pre><code>(b0000 * 2) + 0 =&gt; b0000 00 ( 0) | (b0110 * 2) + 0 =&gt; b0001 10 (12)
(b0000 * 2) + 1 =&gt; b0000 01 ( 1) | (b0110 * 2) + 1 =&gt; b0001 11 (13)

(b0001 * 2) + 0 =&gt; b0000 10 ( 2) | (b0111 * 2) + 0 =&gt; b0011 10 (14)
(b0001 * 2) + 1 =&gt; b0000 11 ( 3) | (b0111 * 2) + 1 =&gt; b0011 11 (15)

(b0010 * 2) + 0 =&gt; b0001 00 ( 4) | (b1000 * 2) + 0 =&gt; b1000 00 (16)
(b0010 * 2) + 1 =&gt; b0001 01 ( 5) | (b1000 * 2) + 1 =&gt; b1000 01 (17)

(b0011 * 2) + 0 =&gt; b0001 10 ( 6) | (b1001 * 2) + 0 =&gt; b0100 10 (18)
(b0011 * 2) + 1 =&gt; b0001 11 ( 7) | (b1001 * 2) + 1 =&gt; b0100 11 (19)

(b0100 * 2) + 0 =&gt; b0010 00 ( 8) | (b1010 * 2) + 0 =&gt; b0101 00 (20)
(b0100 * 2) + 1 =&gt; b0010 01 ( 9) | (b1010 * 2) + 1 =&gt; b0101 01 (21)

(b0101 * 2) + 0 =&gt; b0010 10 (10) | (b1011 * 2) + 0 =&gt; b0101 10 (22)
(b0101 * 2) + 1 =&gt; b0010 11 (11) | (b1011 * 2) + 1 =&gt; b0101 11 (23)
</code></pre>

<p>Each number from the above table can be divided by <code>2</code> (integer division) to
recovery the 2nd choice, or modulo by <code>2</code> to recover the last choice.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CyanogenMod (AOSP) and Vim Build Integration]]></title>
    <link href="http://silverjam.github.io/blog/2014/03/06/cyanogenmod-aosp-and-vim-build-integration/"/>
    <updated>2014-03-06T22:03:00-08:00</updated>
    <id>http://silverjam.github.io/blog/2014/03/06/cyanogenmod-aosp-and-vim-build-integration</id>
    <content type="html"><![CDATA[<p>The build system AOSP and CyanogenMod have some interesting shell scripts that
make it easier to build various parts of the system:</p>

<ul>
<li><code>breakfast [device]</code> &#8211; selects a particular device for building</li>
<li><code>brunch [device]</code> &#8211; building the entire image for the device</li>
<li><code>mka bacon</code> &#8211; almost the same as <code>brunch</code>, but, mmm&#8230;. bacon&#8230;.</li>
<li><code>mm [make_args]</code> &#8211; builds whatever module you happen to be in, just that
module</li>
<li><code>mmp [make_args]</code> &#8211; builds whatever module you happen to be in, just that
module, and pushes it to the device</li>
</ul>


<p>So&#8230; the mm and mmp directives seem like great shortcuts to shorten your
develop / compile / test cycle, right?  But what about editor completion?  You
can&#8217;t invoke mm and mmp in a vim session in order to munch on the compile
errors?!  Fret not!  Now you can!</p>

<p>The first step is a couple of nifty shell scripts.  They probably represent a
horrible compromise of your security, so use with care.  But here they are&#8230;</p>

<p>The first is a server of sorts, it sits in a open shell session, one that&#8217;s all
setup to build Android:</p>

<figure class='code'><figcaption><span>do_over_there_listen.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nv">FIFO_STDINP</span><span class="o">=</span><span class="s2">&quot;/tmp/do_over_there.stdinp.fifo&quot;</span>
</span><span class='line'><span class="nv">FIFO_STDOUT</span><span class="o">=</span><span class="s2">&quot;/tmp/do_over_there.stdout.fifo&quot;</span>
</span><span class='line'><span class="nv">FIFO_STDERR</span><span class="o">=</span><span class="s2">&quot;/tmp/do_over_there.stderr.fifo&quot;</span>
</span><span class='line'>
</span><span class='line'>do_stuff_here<span class="o">()</span> <span class="o">{</span>
</span><span class='line'>    rm -vf <span class="nv">$FIFO_STDINP</span>
</span><span class='line'>    rm -vf <span class="nv">$FIFO_STDOUT</span>
</span><span class='line'>    rm -vf <span class="nv">$FIFO_STDERR</span>
</span><span class='line'>
</span><span class='line'>    mkfifo <span class="nv">$FIFO_STDINP</span>
</span><span class='line'>    mkfifo <span class="nv">$FIFO_STDOUT</span>
</span><span class='line'>    mkfifo <span class="nv">$FIFO_STDERR</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">while </span><span class="nb">read </span>line &lt;<span class="nv">$FIFO_STDINP</span> ; <span class="k">do</span>
</span><span class='line'><span class="k">        </span><span class="nb">echo</span> <span class="s2">&quot;Running: $line&quot;</span>
</span><span class='line'>        <span class="nb">eval</span> <span class="nv">$line</span> &gt;<span class="nv">$FIFO_STDOUT</span> 2&gt;<span class="nv">$FIFO_STDERR</span>
</span><span class='line'>    <span class="k">done</span>
</span><span class='line'><span class="o">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>You run this script like so:</p>

<figure class='code'><figcaption><span>run do_stuff_here</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ . ~/Scripts/do_over_there_listen.sh ; do_stuff_here
</span><span class='line'>removed `/tmp/do_over_there.stdinp.fifo&#39;
</span><span class='line'>removed `/tmp/do_over_there.stdout.fifo&#39;
</span><span class='line'>removed `/tmp/do_over_there.stderr.fifo&#39;
</span></code></pre></td></tr></table></div></figure>


<p>The next step is a script that takes the place of make in your vim session:</p>

<figure class='code'><figcaption><span>do_over_there</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>
</span><span class='line'><span class="nv">D</span><span class="o">=</span><span class="k">$(</span>dirname <span class="k">$(</span>readlink -f <span class="k">${</span><span class="nv">BASH_SOURCE</span><span class="k">}))</span>
</span><span class='line'><span class="nb">source</span> <span class="s2">&quot;$D/do_over_there_listen.sh&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="nb">echo</span> <span class="s2">&quot;mm $@&quot;</span> &gt;<span class="nv">$FIFO_STDINP</span>
</span><span class='line'>
</span><span class='line'>cat <span class="nv">$FIFO_STDOUT</span> &amp;
</span><span class='line'>cat <span class="nv">$FIFO_STDERR</span> &gt;&amp;2 &amp;
</span><span class='line'>
</span><span class='line'><span class="nb">wait</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, the final piece of the puzzle is to tell vim to use the new &#8220;make&#8221;
command with (after <code>chmod +x do_over_there</code> of course):</p>

<figure class='code'><figcaption><span>vimrc mods</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>set makeprg=~/path/to/do_over_there
</span></code></pre></td></tr></table></div></figure>


<p>Finally, you&#8217;ll be able to compile with the AOSP and CyanogenMod build system
niceties but then suck those error logs into vim.  Like so:</p>

<p><img src="http://silverjam.github.io/images/do-over-there.gif"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Android Build Tools SNAFU]]></title>
    <link href="http://silverjam.github.io/blog/2013/06/05/android-build-tools-snafu/"/>
    <updated>2013-06-05T16:28:00-07:00</updated>
    <id>http://silverjam.github.io/blog/2013/06/05/android-build-tools-snafu</id>
    <content type="html"><![CDATA[<p>So, I started developing for the Android platform in earnest around April of
2013.  I found that the Android project had release not just a mere plugin for
Eclipse but a rebranded, pre-customized version of Eclipse called ADT or
Android Development Toolkit.</p>

<p>This seemed pretty cool, I guess, though it seems better to just release a
plugin so you can slice and dice your dev environment however you want.</p>

<h2>Cool, but can it do Vim?</h2>

<p>At least for the February release of ADT it did not work so well (the 20130219
version)&#8211; installing vrapper breaks all kinds of things:</p>

<p>This:</p>

<p><img src="http://silverjam.github.io/images/adt-splash-screen-1.png"></p>

<p>Turned in to this:</p>

<p><img src="http://silverjam.github.io/images/juno-splash-screen.png"></p>

<p>Afterwards, all of my Android integration pre-packaged in ADT seemed to
disappear.  I had to manually re-install the Android integration that was
previously there.  Not sure why I did&#8230; maybe it was user error&#8230; but it was
not a good user experience.</p>

<h2>Alternate Reality: Android Studio</h2>

<p>So far, my experience with trying the Android Studio preview has been great,
but mostly because the of the dark UI, super easy <em>vim installation</em> that didn&#8217;t
<em>nuke any Android integration</em> &#8230; and because it does stuff like this:</p>

<p><img src="http://silverjam.github.io/images/astudio-closure-fold.png"></p>

<p>Finally, something that can at least make Java not look so stupid.  To quote
the <a href="http://www.cnn.com/2008/POLITICS/09/10/campaign.lipstick/">Sarah Palin jibe</a>, <em>&#8220;it&#8217;s just lipstick on a pig&#8221;</em>, but I&#8217;ll take
it!  Yes sir, uh-huh.</p>

<hr />

<p>So&#8230; this brings me to new version of ADT (verstion 20130522) &#8211; I&#8217;m starting
a new project I figured I&#8217;d try to upgrade to the May release of ADT.  Lo and
behold it doesn&#8217;t come pre-packaged with something called <em>Android Build Tools</em>
and it has a really shitty way to install it, basically it pops up a nag box
and says:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Hey, we couldn't take the time to implement auto download or to auto package
</span><span class='line'>this new tool we're requiring, so go grab it yourself, good luck!
</span><span class='line'>
</span><span class='line'>Yours truly,
</span><span class='line'>-Asshats</span></code></pre></td></tr></table></div></figure>


<p>This wasted a good hour as I groped around trying to figure out what was wrong.
Finally the Internet saved me as I discovered that many other developers can&#8217;t
read either:</p>

<ul>
<li><a href="http://stackoverflow.com/questions/885009/r-cannot-be-resolved-android-error">R cannot be resolved</a> [Stack Overflow]</li>
<li><a href="https://groups.google.com/forum/?fromgroups#!topic/android-developers/rCaeT3qckoE">Some else with the R problem</a> [Google Groups]</li>
<li><a href="https://groups.google.com/forum/?fromgroups=#!topic/adt-dev/epOfZbKPFdk">Another person, same problem</a> [Google Groups]</li>
</ul>


<p>The thing is, I did read the nag dialog, and I tried to download whatever it
wanted, but for whatever reason (poor up bringing &#8211; loose morals &#8211; just plain
dumb) I didn&#8217;t succeed.  So, this proves at least one thing: <em>Android
developers can&#8217;t read</em>.  Or does it?  Maybe it proves that Google wasted a lot
of people&#8217;s time with this decision.</p>

<!-- vim: spell
-->

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Google Apps Script: Insert Header Numbers]]></title>
    <link href="http://silverjam.github.io/blog/2013/05/26/google-apps-script-insert-header-numbers/"/>
    <updated>2013-05-26T23:28:00-07:00</updated>
    <id>http://silverjam.github.io/blog/2013/05/26/google-apps-script-insert-header-numbers</id>
    <content type="html"><![CDATA[<p>Google <a href="https://developers.google.com/apps-script/"><em>Apps Script</em></a> presents an interesting solution to extend
the features of Google applications.  The usual way to do this is with client
side browser extensions, but they are not portable (that is, specific to a
browser, and specific to the web)&#8211; and cannot run unattended.</p>

<p>Google&#8217;s apps (and similarly, 99% of other web apps) have long lacked
scriptability that native applications enjoy. <em>Apps script</em> is a play to
resolve that deficiency.</p>

<h2>TL;DR</h2>

<p>Jump to <a href="#The_Solution">the solution</a> for the script that adds header numbers.</p>

<h2>The problem</h2>

<p>Google docs has undergone some interesting simplifications in recent times, and
it&#8217;d be interesting to learn why certain features got chopped.</p>

<p>In particular, at one point it was possible to insert numeric headers into a
Google doc, though it looks like this was a <a href="http://www.youtube.com/watch?v=xaypUbQd6wI">CSS hack</a>.  Since Google
docs isn&#8217;t exposing the underlying CSS of the document anymore, this method no
longer works.  You can also turn your headers
<a href="http://webapps.stackexchange.com/questions/23861/header-numbering-in-google-docs">into numbered lists</a>
&#8230;  but this is <strong>really</strong> cumbersome.</p>

<p>Why do you need numeric headers?  Well, it&#8217;s a pretty standard word processor
feature&#8211; if you&#8217;re packaging information into a fairly static format (say a
PDF), it&#8217;s useful for communication purposes to reference a specific part of
the document; for example, if you were writing a technical review of someone&#8217;s
software.</p>

<h2>Background</h2>

<p>Google offers several different types of scripts:</p>

<p><img src="http://silverjam.github.io/images/gapps-script-types.png"></p>

<p>The biggest distinction appears to be if a script is bound to a
<a href="https://developers.google.com/apps-script/scripts_containers">container</a> or <a href="https://developers.google.com/apps-script/execution_script_editor">not</a> &#8211; that is, whether
the script lives inside a doc, form, spreadsheet, or if it sits outside one of
these (sitting in the script editor).  Scripts can also become a standalone
WebApp.</p>

<p>As first, standalone scripts seemed useful for testing things out, but the
inability to interact with the user quickly made a standalone scripts
useless&#8230;  I found myself thinking that as I developed useful things with
standalone scripts (macros!) that it&#8217;d be nice to share these, and simply
insert some silly UI prompts to make the script generic&#8211; it&#8217;s unclear how to
do this without making the script specific to a container, then sharing it in
the <a href="https://developers.google.com/apps-script/publishing_gallery#installing_a_script_from_the_gallery">document specific script gallery</a> &#8211; right now, there&#8217;s no
script gallery for text documents.</p>

<h3>Power users, macro sharing, and the apps script gallery</h3>

<p>The apps script gallery seems sadly lacking&#8230; why is the script gallery buried
inside the document?  This hardly seems like the &#8220;happening&#8221; place to showcase
cool macros:</p>

<p><img src="http://silverjam.github.io/images/gapps-script-gallery.png"></p>

<p>I did manage to find apps script &#8220;gallery&#8221; at one point, but it was full of
commercial apps geared at implementing solution on top of Google Apps for
businesses.  This is great, but if Google wants to crowd source all the crazy
features that users want by providing power-users with scripting capabilities,
there should probably be something more like the chrome extensions gallery to
showcase macros.  That is, something easily accessible from a Google search.</p>

<h2>The solution <a name="The_Solution"></a></h2>

<p>The solution is to simply use the Google apps script API to create your own
header numbers.  It&#8217;s somewhat cumbersome, and will probably break in many
cases, but it works.</p>

<p>There&#8217;s probably a better way to do this&#8230; for example, one improvement would
be to figure out how to share this to a common repository so it could be
imported into other documents.</p>

<p>Start by creating a new apps script in the document:</p>

<p><img src="http://silverjam.github.io/images/launch-script-editor.png"></p>

<p>Then insert the following script (also maintained <a href="https://gist.github.com/silverjam/5613969">in a gist</a>):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">state</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">headerLevel1</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">headerLevel2</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">headerLevel3</span><span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="kr">private</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">getSectionNumber</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">paragraph</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="nx">paragraph</span><span class="p">.</span><span class="nx">getHeading</span><span class="p">()</span> <span class="o">==</span> <span class="nx">DocumentApp</span><span class="p">.</span><span class="nx">ParagraphHeading</span><span class="p">.</span><span class="nx">HEADING1</span> <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nx">state</span><span class="p">.</span><span class="nx">headerLevel2</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">state</span><span class="p">.</span><span class="nx">headerLevel3</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="p">(</span><span class="o">++</span><span class="nx">state</span><span class="p">.</span><span class="nx">headerLevel1</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span> <span class="nx">paragraph</span><span class="p">.</span><span class="nx">getHeading</span><span class="p">()</span> <span class="o">==</span> <span class="nx">DocumentApp</span><span class="p">.</span><span class="nx">ParagraphHeading</span><span class="p">.</span><span class="nx">HEADING2</span> <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">state</span><span class="p">.</span><span class="nx">headerLevel1</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="nx">state</span><span class="p">.</span><span class="nx">headerLevel1</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="nx">state</span><span class="p">.</span><span class="nx">headerLevel3</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="nx">state</span><span class="p">.</span><span class="nx">headerLevel1</span> <span class="o">+</span> <span class="s2">&quot;.&quot;</span> <span class="o">+</span> <span class="p">(</span><span class="o">++</span><span class="nx">state</span><span class="p">.</span><span class="nx">headerLevel2</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span> <span class="nx">paragraph</span><span class="p">.</span><span class="nx">getHeading</span><span class="p">()</span> <span class="o">==</span> <span class="nx">DocumentApp</span><span class="p">.</span><span class="nx">ParagraphHeading</span><span class="p">.</span><span class="nx">HEADING3</span> <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nx">state</span><span class="p">.</span><span class="nx">headerLevel2</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>        <span class="nx">state</span><span class="p">.</span><span class="nx">headerLevel2</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="nx">state</span><span class="p">.</span><span class="nx">headerLevel1</span> <span class="o">+</span> <span class="s2">&quot;.&quot;</span> <span class="o">+</span> <span class="nx">state</span><span class="p">.</span><span class="nx">headerLevel2</span> <span class="o">+</span> <span class="s2">&quot;.&quot;</span> <span class="o">+</span> <span class="p">(</span><span class="o">++</span><span class="nx">state</span><span class="p">.</span><span class="nx">headerLevel3</span><span class="p">)</span> <span class="o">+</span> <span class="s2">&quot; &quot;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;&quot;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">isNumber</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">text</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="o">!</span><span class="nb">isNaN</span><span class="p">(</span><span class="nx">text</span><span class="p">);</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">removeExistingHeaderNumber</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">text</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">text</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span> <span class="kr">private</span><span class="p">.</span><span class="nx">isNumber</span><span class="p">(</span><span class="nx">text</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">i</span><span class="p">))</span> <span class="o">||</span> <span class="nx">text</span><span class="p">.</span><span class="nx">charAt</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="o">==</span> <span class="s2">&quot;.&quot;</span> <span class="p">)</span>
</span><span class='line'>          <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">break</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">text</span><span class="p">.</span><span class="nx">substr</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="kd">function</span> <span class="nx">addHeaderNumbers</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">doc</span> <span class="o">=</span> <span class="nx">DocumentApp</span><span class="p">.</span><span class="nx">getActiveDocument</span><span class="p">();</span>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">body</span> <span class="o">=</span> <span class="nx">doc</span><span class="p">.</span><span class="nx">getBody</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">body</span><span class="p">.</span><span class="nx">getNumChildren</span><span class="p">();</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">element</span> <span class="o">=</span> <span class="nx">body</span><span class="p">.</span><span class="nx">getChild</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="nx">element</span><span class="p">.</span><span class="nx">getType</span><span class="p">()</span> <span class="o">!=</span> <span class="nx">DocumentApp</span><span class="p">.</span><span class="nx">ElementType</span><span class="p">.</span><span class="nx">PARAGRAPH</span> <span class="p">)</span>
</span><span class='line'>      <span class="k">continue</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">paragraph</span> <span class="o">=</span> <span class="nx">element</span><span class="p">.</span><span class="nx">asParagraph</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span> <span class="nx">paragraph</span><span class="p">.</span><span class="nx">getHeading</span><span class="p">()</span> <span class="o">!=</span> <span class="nx">DocumentApp</span><span class="p">.</span><span class="nx">ParagraphHeading</span><span class="p">.</span><span class="nx">NORMAL</span> <span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="kd">var</span> <span class="nx">sectionNumber</span> <span class="o">=</span> <span class="kr">private</span><span class="p">.</span><span class="nx">getSectionNumber</span><span class="p">(</span><span class="nx">paragraph</span><span class="p">);</span>
</span><span class='line'>      <span class="nx">paragraph</span><span class="p">.</span><span class="nx">setText</span><span class="p">(</span><span class="nx">sectionNumber</span> <span class="o">+</span> <span class="kr">private</span><span class="p">.</span><span class="nx">removeExistingHeaderNumber</span><span class="p">(</span><span class="nx">paragraph</span><span class="p">.</span><span class="nx">getText</span><span class="p">()))</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">doc</span><span class="p">.</span><span class="nx">saveAndClose</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Save the project and return to the document.  Then use the script manager to
open the list of available functions to run:</p>

<p><img src="http://silverjam.github.io/images/gapps-script-manager.png"></p>

<p>Then select the &#8216;addHeaderNumbers&#8217; script:</p>

<p><img src="http://silverjam.github.io/images/gapps-script-run-script.png"></p>

<p>And magically your document will now have header numbering:</p>

<p><img src="http://silverjam.github.io/images/gapps-example-header-numbers.png"></p>

<p>EOT</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Infinite terminal logs]]></title>
    <link href="http://silverjam.github.io/blog/2013/05/24/infinite-terminal-logs/"/>
    <updated>2013-05-24T23:11:00-07:00</updated>
    <id>http://silverjam.github.io/blog/2013/05/24/infinite-terminal-logs</id>
    <content type="html"><![CDATA[<h2>The Problem: Unsatisfying Terminal Emulators</h2>

<p>Sometimes when you&#8217;re hacking on things it&#8217;s a great resource to be able to
recall / search everything that you&#8217;ve done in the past so that you can
reconstruct what&#8217;s happened in a coherent matter.</p>

<p>This is, a crutch, or a substitute for a structured approach to a problem, but
I find it useful during &#8220;hack and slash&#8221; sessions when you don&#8217;t necessarily
want or need a structured approach.</p>

<p>Some commercial terminals offer logging (<a href="http://vandyke.com/products/securecrt/index.html">SecureCRT</a> for example).
Linux, terminals&#8230; not so much.  No such option exists in the default Ubuntu
terminal.  There are two terminals named <em>Terminator</em> one is <a href="http://software.jessies.org/terminator/">Java
based</a> and does not have a package in the standard Ubuntu
repositories, and the <a href="http://www.tenshu.net/p/terminator.html">other</a> is present in Ubuntu&#8217;s
standard repositories.</p>

<p>You can image this led to some confusion on my part&#8230; because both offer some
functionality that I wanted, but what I really wanted was a combination of the
two terminals.  It&#8217;s ironic that SecureCRT offers the best solution for what I wanted.</p>

<p>Java Terminator:</p>

<ul>
<li>Terminal logging</li>
<li>Good search, ala OSX Term.app (does not really work though)</li>
</ul>


<p>Tenshu Terminator:</p>

<ul>
<li>Infinite scrollback (also, does not work very well)</li>
<li>Tiling</li>
</ul>


<p>So, what is a hacker to do?  Why&#8230; hack up something that works&#8230; a good
citizen of the FLOSS world would try to add these features to the terminal
emulator that they liked, but why bother when you can create a solution that
solves most of the problem in a few minutes&#8230; Really, I ended up not like the
java based Terminator at all because it was ugly and did not ingrate well with
Ubuntu, so created my own logging solution seemed like it would solve the
logging, search and infinite scrollback use cases.</p>

<h2>The Solution: Old Fashioned &#8216;Script&#8217; Utility</h2>

<p>The <a href="http://ultra.pr.erau.edu/~jaffem/classes/cs125/script.htm">script</a> tool is a unix utility to record everything that
passing from the shell to the terminal emulator to control things like cursor
movements, colors, and the contents of the cells on the terminal device.</p>

<p>This is pretty heavy handed, and allows you to replay your entire terminal
session (complete with timings) if you so desire.  But this isn&#8217;t the goal,
the goal is to get a terminal log, that easily searchable.</p>

<p>So, to start, data is needed first, so as soon as the shell is started,
everything is recorded:</p>

<figure class='code'><figcaption><span>shell profile additions</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="k">if</span> <span class="o">[</span> -z <span class="s2">&quot;$UNDER_SCRIPT&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'>
</span><span class='line'><span class="k">    </span><span class="nv">logdir</span><span class="o">=</span><span class="nv">$HOME</span>/Logs
</span><span class='line'>    <span class="nv">logname</span><span class="o">=</span><span class="k">$(</span>date +%F_%T<span class="k">)</span>.<span class="nv">$$</span>.script
</span><span class='line'>
</span><span class='line'>    <span class="nv">logfile</span><span class="o">=</span><span class="nv">$logdir</span>/.<span class="nv">$logname</span>
</span><span class='line'>    <span class="nv">final_logfile</span><span class="o">=</span><span class="nv">$logdir</span>/<span class="nv">$logname</span>
</span><span class='line'>
</span><span class='line'>    <span class="nb">trap</span> <span class="s1">&#39;( mv $logfile $final_logfile )&#39;</span> EXIT
</span><span class='line'>
</span><span class='line'>    <span class="k">if</span> <span class="o">[</span> ! -d <span class="nv">$logdir</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">        </span>mkdir <span class="nv">$logdir</span>
</span><span class='line'>    <span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="k">    </span>gzip -q <span class="nv">$logdir</span>/*.script &amp;&gt;/dev/null
</span><span class='line'>
</span><span class='line'>    <span class="nb">export </span><span class="nv">UNDER_SCRIPT</span><span class="o">=</span><span class="nv">$logfile</span>
</span><span class='line'>
</span><span class='line'>    script -e -f -q <span class="nv">$logfile</span>
</span><span class='line'>    <span class="nb">exit</span> <span class="nv">$?</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then a <a href="http://liftoff.github.io/GateOne/Developer/terminal.html">terminal emulation library</a> is added:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~/Logs
</span><span class='line'><span class="nv">$ </span>wget https://raw.github.com/liftoff/GateOne/master/terminal/terminal.py
</span></code></pre></td></tr></table></div></figure>


<p>Then a script is implemented to emulate a terminal and generate a usable log
file:</p>

<figure class='code'><figcaption><span>~/Logs/stripesc.py</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">terminal</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">locale</span>
</span><span class='line'>
</span><span class='line'><span class="n">encoding</span> <span class="o">=</span> <span class="n">locale</span><span class="o">.</span><span class="n">getpreferredencoding</span><span class="p">()</span>
</span><span class='line'><span class="n">term</span> <span class="o">=</span> <span class="n">terminal</span><span class="o">.</span><span class="n">Terminal</span><span class="p">(</span><span class="mi">200</span><span class="p">,</span><span class="mi">200</span><span class="p">)</span> <span class="c"># bigger than we could possibly need </span>
</span><span class='line'>
</span><span class='line'><span class="n">fp</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">stdin</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">process_scrollback</span><span class="p">(</span><span class="n">term</span><span class="p">):</span>
</span><span class='line'>    <span class="k">if</span> <span class="ow">not</span> <span class="n">term</span><span class="o">.</span><span class="n">scrollback_buf</span><span class="p">:</span>
</span><span class='line'>        <span class="k">return</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">term</span><span class="o">.</span><span class="n">scrollback_buf</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">tounicode</span><span class="p">()</span><span class="o">.</span><span class="n">rstrip</span><span class="p">()</span><span class="o">.</span><span class="n">encode</span><span class="p">(</span><span class="n">encoding</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">make_scroll_up_cb</span><span class="p">(</span><span class="n">term</span><span class="p">):</span>
</span><span class='line'>    <span class="k">def</span> <span class="nf">_</span><span class="p">():</span>
</span><span class='line'>        <span class="k">print</span> <span class="n">process_scrollback</span><span class="p">(</span><span class="n">term</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">_</span>
</span><span class='line'>
</span><span class='line'><span class="n">term</span><span class="o">.</span><span class="n">add_callback</span><span class="p">(</span><span class="n">terminal</span><span class="o">.</span><span class="n">CALLBACK_SCROLL_UP</span><span class="p">,</span> <span class="n">make_scroll_up_cb</span><span class="p">(</span><span class="n">term</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then, as need you&#8217;d invoke a shell script to decode a log, and grep for
something interesting:</p>

<figure class='code'><figcaption><span>~/Logs/strip-escape-codes.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat - | python stripesc.py
</span></code></pre></td></tr></table></div></figure>


<p>Also periodically, you could throw away the terminal emulation data that&#8217;s no
longer needed:</p>

<figure class='code'><figcaption><span>~/Logs/strip-all-escape-codes.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'><span class="k">for </span>log_file in <span class="sb">`</span>ls -1 *.script.gz<span class="sb">`</span>; <span class="k">do</span>
</span><span class='line'>
</span><span class='line'><span class="k">    </span>zcat <span class="nv">$log_file</span> | python stripesc.py
</span><span class='line'>        &gt;<span class="sb">`</span><span class="nb">echo</span> <span class="nv">$log_file</span> | sed -e <span class="s1">&#39;s/.script.gz/.log/&#39;</span><span class="sb">`</span>
</span><span class='line'>
</span><span class='line'><span class="k">done</span>
</span></code></pre></td></tr></table></div></figure>


<p>Thus, we&#8217;ve solved the problem with minimal effort, and maximum utility
(albeit a little cumbersome).</p>

<!-- vim: spell:
-->

]]></content>
  </entry>
  
</feed>
